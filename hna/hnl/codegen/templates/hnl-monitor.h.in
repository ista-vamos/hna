#ifndef HNLMONITOR_H_
#define HNLMONITOR_H_

#include "monitor.h"
#include "traceset.h"
@SUBMONITOR_INCLUDE@

///
// The top-level class for HNL monitor for arbitrary HNL formula
class HNLMonitor : public Monitor {
  // HNLMonitor is a wrapper and a container for traces (including function traces).
  // The actual monitoring happens in this submonitor.
  @SUBMONITOR_TY@ _monitor;

protected:
  TraceSet _traces;

  #include "function-instances.h"

public:
  HNLMonitor(CmdArgs *cmd = nullptr) : _cmd(cmd) {
    #include "functions-initialize.h"
  }

  virtual ~HNLMonitor() {}

  // adding and extending traces
  void newTrace(unsigned trace_id) { _traces.newTrace(trace_id); }

  void extendTrace(unsigned trace_id, const Event &e) {
    _traces.extendTrace(trace_id, e);
  }

  void traceFinished(unsigned trace_id) { _traces.traceFinished(trace_id); }

  void noFutureUpdates() { _traces.noFutureUpdates(); }

  bool allTracesFinished() { return _traces.allTracesFinished(); }

  bool hasTrace(unsigned trace_id) { return _traces.hasTrace(trace_id); }

  Verdict step();
};

#endif // HNLMONITOR_H_
