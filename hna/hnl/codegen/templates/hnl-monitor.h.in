// template: hnl-monitor.h.in

#ifndef HNLMONITOR_H_
#define HNLMONITOR_H_

#include "monitor.h"
#include "traceset.h"
#include "submonitor/hnl-monitor.h"

#include "cmd.h"

@namespace_start@

///
// The top-level class for HNL monitor for an arbitrary HNL formula
class HNLMonitor : public Monitor {
  // This class is a wrapper and a container for traces (including function traces).
  // The actual monitoring happens in this submonitor.
  sub::HNLMonitor _monitor;
  // All traces for this monitor (and submonitors).
  // The submonitors will have only a view of this container
  TraceSet _traces;
  CmdArgs *_cmd;

  #include "function-instances.h"

public:
  HNLMonitor(CmdArgs *cmd = nullptr) : _cmd(cmd) {
    #include "functions-initialize.h"
  }

  //virtual ~HNLMonitor() {}

  // adding and extending traces
  void newTrace(unsigned trace_id);
  void extendTrace(unsigned trace_id, const Event &e);
  void traceFinished(unsigned trace_id);
  void noFutureUpdates();
  bool allTracesFinished();
  bool hasTrace(unsigned trace_id);

  Verdict step();
};

@namespace_end@

#endif // HNLMONITOR_H_
