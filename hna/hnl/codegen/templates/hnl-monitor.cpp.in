#ifdef MEASURE_CPUTIME
#include <ctime>
#endif // !MEASURE_CPUTIME

#include <cassert>

#include "hnl-monitor.h"

@namespace_start@

Verdict HNLMonitor::step() {
    /* GENERATED */
    /* It can modify the `finished` variable */
    #include "gen-function-traces.h"

    return _monitor.step();
}

// adding and extending traces
void HNLMonitor::newTrace(unsigned trace_id) {
    _traces.newTrace(trace_id);
    _monitor.newTrace(trace_id);
}

void HNLMonitor::traceFinished(unsigned trace_id) {
    _traces.traceFinished(trace_id);
    _monitor.traceFinished(trace_id);
}

void HNLMonitor::extendTrace(unsigned trace_id, const Event &e) {
  _traces.extendTrace(trace_id, e);
}

void HNLMonitor::noFutureUpdates() {
    _traces.noFutureUpdates();
    _monitor.noFutureUpdates();
}

bool HNLMonitor::allTracesFinished() {
    bool finished =  _traces.allTracesFinished();
    // GENERATED, can modify `finished` variable
    #include "function-traces-finished.h"

    return finished;
}

bool HNLMonitor::hasTrace(unsigned trace_id) {
    return _traces.hasTrace(trace_id);
}

@namespace_end@
