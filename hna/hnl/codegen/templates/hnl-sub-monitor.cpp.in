// template: hnl-sub-monitor.cpp.in

#include <cassert>

#include "hnl-monitor.h"

@namespace_start@

bool HNLMonitor::addNewTraces() {
  if (auto *t1 = _traces.getNewTrace()) {
      /* GENERATED */
      #include "create-instances.h"
  }

  return _traces.finished();
}

Verdict HNLMonitor::step() {
  Verdict verdict;

  unsigned empty_slots{0};
  const auto n_monitors = _instances.size();

  for (unsigned n = 0; n < n_monitors; ++n) {
      auto *instance = _instances[n];
      if (!instance) {
          ++empty_slots;
          continue;
      }
      if ((verdict = instance->monitor->step()) != Verdict::UNKNOWN) {
          // this monitor is done
          _instances[n] = nullptr;
          ++empty_slots;
      }
  }

  if (static_cast<float>(empty_slots) / n_monitors > 0.3) {
      condenseWbg();
  }

  bool traces_finished = addNewTraces();
  bool finished = traces_finished && _monitors_wbg.empty();

  if (finished) {
      assert(_monitors_wbg.empty());
      return Verdict::TRUE;
  }

  return Verdict::UNKNOWN;
}

void HNLMonitor::condenseWbg() {
    if (_monitors_wbg.empty())
        return;

    // FIXME: do it in place without creating a new vector
    decltype(_monitors_wbg) tmp;
    tmp.reserve(_monitors_wbg.size());

    for (auto *ptr : _monitors_wbg) {
        if (ptr) {
            tmp.push_back(ptr);
        }
    }
    _monitors_wbg.swap(tmp);
}

@namespace_end@
