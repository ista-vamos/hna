// template: hnl-sub-monitor.h.in

#ifndef HNL_SUB_MONITOR_H__@MONITOR_NAME@
#define HNL_SUB_MONITOR_H__@MONITOR_NAME@

#include <vector>
#include <list>
#include <memory>

#include "monitor.h"
#include "verdict.h"
#include "trace.h"
#include "tracesetview.h"

/* generated */
#include "instance.h"

@namespace_start@

///
// This class is an HNL monitor that does not handle atoms but nested monitors
// in cases when there is quantifier alternation:
// In cases when the formula is `forall ..., exists ...: F`,
// we create a nested monitor M for the negation of `exists ...: F` and
// use it from HNLSubMonitor that monitors `forall ...: !M`.
class HNLMonitor : public Monitor {
  TraceSetView _traces;

  // here we store the running monitors
  //std::vector<std::unique_ptr<@sub-namespace@::HNLMonitor>> _monitors_wbg;
  std::vector<std::unique_ptr<Instance>> _instances;

  bool addNewTraces();
  void condenseWbg();

public:

  Verdict step();

  void noFutureUpdates() { // _traces.noFutureUpdates();
    abort();
  }
};

#endif // !HNL_SUB_MONITOR_H__@MONITOR_NAME@

@namespace_end@
