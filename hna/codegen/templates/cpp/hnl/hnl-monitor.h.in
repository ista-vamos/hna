// #pragma once is buggy if we generate multiple HNL monitors
// and try to include them in the HNA monitor. We have to use
// normal include guards. However, they must be different for each HNL
// monitor

#ifndef HNL_MONITOR_H__@MONITOR_NAME@
#define HNL_MONITOR_H__@MONITOR_NAME@

#include <vector>
#include <list>
#include <memory>

#include "trace.h"
#include "traceset.h"
#include "verdict.h"
#include "monitor.h"
#include "atom-monitor.h"
#include "hnl-monitor-base.h"
#include "functions.h"

/* generated */
#include "hnl-instance.h"

@namespace_start@

class HNLMonitor : public HNLMonitorBase {
  std::vector<std::unique_ptr<@namespace@::HNLInstance>> _instances;
  std::list<std::unique_ptr<@namespace@::AtomMonitor>> _atom_monitors;

  #include "function-instances.h"

public:
  AtomMonitor *createAtomMonitor(HNLEvaluationState monitor_type, @namespace@::HNLInstance&);
  void removeInstance(HNLInstance *instance);

  Verdict step();
};

#endif // !HNL_MONITOR_H__@MONITOR_NAME@

@namespace_end@