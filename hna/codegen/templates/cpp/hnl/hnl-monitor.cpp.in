#ifdef MEASURE_CPUTIME
#include <ctime>
#endif // !MEASURE_CPUTIME

#include <cassert>

#include "hnl-monitor.h"
#include "atom-monitor.h"
#include "atoms.h"



/* generated part START */
#include "hnl-state.h"
/* generated part END */

@namespace_start@

// must be inside the namespace
#include "bdd-structure.h"

static inline Verdict do_step(AtomMonitor *M) {
  #include "do_step.h"
}


bool HNLMonitor::addNewTraces() {
  if (auto *t1 = _traces.getNewTrace()) {
      /* GENERATED */
      #include "create-instances.h"
  }

  return _traces.finished();
}

bool FunctionHNLMonitor::addNewTraces() {
  // We know that this HNL monitor has only two quantifiers,
  // so this code is not generated
  if (auto *tl = _traces_l.getNewTrace()) {
      #include "create-instances-left.h"
  }

  if (auto *tr = _traces_r.getNewTrace()) {
      #include "create-instances-right.h"
  }

  return _traces_l.finished() && _traces_r.finished();
}

Verdict HNLMonitor::step() {
#ifdef MEASURE_CPUTIME
    struct timespec start, end;
    clock_gettime(CLOCK_THREAD_CPUTIME_ID, &start);
#endif // !MEASURE_CPUTIME

  Verdict verdict;

  bool erased{false};
  const unsigned n_atoms = _atom_monitors.size();
  for (unsigned n = 0; n < n_atoms; ++n) {
      auto *atom_monitor = _atom_monitors[n].get();

      if ((verdict = do_step(atom_monitor)) != Verdict::UNKNOWN) {
          // std::cerr << "CACHE THE RESULT\n";
          // _verdicts[atom_monitor->kind()][{atom_monitor->t1(), atom_monitor->t2()}] = verdict;

          for (auto it = atom_monitor->used_by_begin(),
                    et = atom_monitor->used_by_end(); it != et; ++it) {
              auto *instance = *it;

                // FIXME: generate the code that branches on instance->state and verdict
                // instead of having statically compiled BDD in the data segment.
                // (less reads from memory)
              auto action = BDD[instance->state][verdict == Verdict::TRUE ? 1 : 2 ];
              if (action == RESULT_FALSE) {
                  // The whole HNL formula evaluated to FALSE for the traces in `instance`.
                  return Verdict::FALSE;
              }

              if (action == RESULT_TRUE) {
                  // The whole HNL formula is satisfied for the traces in `instance`,
                  removeInstance(instance);
                  continue;
              }

              // switch to new atom monitor
              assert(action > 0 && "Invalid next atom");
              instance->state = action;
              instance->monitor = createAtomMonitor(action, *instance);
          }

          _atom_monitors[n].reset();
          erased = true;
      }
  }

  if (erased) {
      condenseAtomsVector();
  }

#ifdef MEASURE_CPUTIME
  clock_gettime(CLOCK_THREAD_CPUTIME_ID, &end);
  stats.cputime.tv_sec += (end.tv_sec - start.tv_sec);
  stats.cputime.tv_nsec += (end.tv_nsec - start.tv_nsec);
#endif // !MEASURE_CPUTIME

#ifdef MEASURE_CPUTIME
  clock_gettime(CLOCK_THREAD_CPUTIME_ID, &start);
#endif // !MEASURE_CPUTIME

  bool traces_finished = addNewTraces();

#ifdef MEASURE_CPUTIME
  clock_gettime(CLOCK_THREAD_CPUTIME_ID, &end);
  stats.cputime.tv_sec += (end.tv_sec - start.tv_sec);
  stats.cputime.tv_nsec += (end.tv_nsec - start.tv_nsec);
  stats.cputime_adding_instances.tv_sec += (end.tv_sec - start.tv_sec);
  stats.cputime_adding_instances.tv_nsec += (end.tv_nsec - start.tv_nsec);
#endif // !MEASURE_CPUTIME


  bool finished = traces_finished && _instances.empty();

  /* GENERATED */
  /* It can modify the `finished` variable */
  #include "gen-function-traces.h"

  if (finished) {
      assert(_atom_monitors.empty());
      return Verdict::TRUE;
  }

  return Verdict::UNKNOWN;
}

AtomMonitor *HNLMonitor::createAtomMonitor(HNLEvaluationState monitor_type, HNLInstance& instance) {
    assert(monitor_type > 0 && "Invalid monitor type");

    AtomMonitor *monitor;

    /* GENERATED */
    #include "create-atom-monitor.h"

    monitor->setUsedBy(instance);
    _atom_monitors.emplace_back(monitor);

    ++stats.num_atoms;

    return monitor;
}

void HNLMonitor::removeInstance(HNLInstance *instance) {
    // FIXME: make this efficient
    auto it = std::find_if(_instances.begin(), _instances.end(), [&instance](auto& ptr) { return ptr.get() == instance; });
    assert (it != _instances.end());
    // Each HNLInstance waits exactly for one monitor, so it is safe to just remove
    // it as this monitor has finished and no other monitor can have a
    // reference to the configuration.
    *it = std::move(_instances[_instances.size() - 1]);
    _instances.pop_back();
}

void HNLMonitor::condenseAtomsVector() {
    if (_atom_monitors.empty())
        return;

    // FIXME: do it in place without creating a new vector
    decltype(_atom_monitors) tmp;
    tmp.reserve(_atom_monitors.size());

    for (auto& ptr : _atom_monitors) {
        if (ptr) {
            tmp.push_back(std::move(ptr));
        }
    }
    _atom_monitors.swap(tmp);

#if 0
    // swap valid unique_ptr's from back of the vector to the
    // cleared places at the front
    size_t l = 0, r = _atom_monitors.size() - 1;
    while (true) {
        // clear the vector from the back and find first valid ptr
        while (l <= r && !_atom_monitors[r]) {
            _atom_monitors.pop_back();
            --r;
        }

        // find the first clear space from the left
        while (l < r && _atom_monitors[l])
            ++l;
    }
#endif
}

@namespace_end@
